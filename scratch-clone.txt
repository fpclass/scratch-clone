-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/fpclass/scratch-clone#readme</a>
@package scratch-clone
@version 2022.0.0.0


-- | This module contains the types for the abstract syntax tree.
module Language

-- | A program consists of a sequence of statements.
type Program = [Stmt]

-- | A program is a sequence of statements.
data Stmt
AssignStmt :: String -> Expr -> Stmt
[assignVar] :: Stmt -> String
[assignExpr] :: Stmt -> Expr
IfStmt :: Expr -> [Stmt] -> [(Expr, [Stmt])] -> [Stmt] -> Stmt
[ifCond] :: Stmt -> Expr
[ifBody] :: Stmt -> [Stmt]
[ifElseIf] :: Stmt -> [(Expr, [Stmt])]
[ifElse] :: Stmt -> [Stmt]
RepeatStmt :: Expr -> [Stmt] -> Stmt
[repeatTimesExpr] :: Stmt -> Expr
[repeatBody] :: Stmt -> [Stmt]

-- | Operators.
data Op

-- | The + operator.
Add :: Op

-- | The - operator.
Sub :: Op

-- | The * operator.
Mul :: Op

-- | The / operator.
Div :: Op

-- | The power of operator.
Pow :: Op

-- | The == operator.
Equal :: Op

-- | The /= operator.
Neq :: Op

-- | The &lt; operator.
LessThan :: Op

-- | The &lt;= operator.
LessOrEqual :: Op

-- | The &gt; operator.
GreaterThan :: Op

-- | The &gt;= operator.
GreaterOrEqual :: Op

-- | Expressions.
data Expr
ValE :: Int -> Expr
VarE :: String -> Expr
BinOpE :: Op -> Expr -> Expr -> Expr
instance GHC.Show.Show Language.Op
instance GHC.Enum.Bounded Language.Op
instance GHC.Enum.Enum Language.Op
instance GHC.Classes.Eq Language.Op
instance GHC.Show.Show Language.Expr
instance GHC.Show.Show Language.Stmt

module Interpreter

-- | In our memory, named locations map to values.
type Memory = [(String, Int)]

-- | Enumerates reasons for errors.
data Err

-- | Division by zero was attempted.
DivByZeroError :: Err

-- | Raising a number to a negative exponent was attempted.
NegativeExponentError :: Err

-- | Tried to read from a variable that does not exist.
UninitialisedMemory :: String -> Err

-- | Given a program and the initial memory contents, determines what
--   evaluating the program does to the memory.
interpret :: Program -> Memory -> Either Err Memory
instance GHC.Show.Show Interpreter.Err
instance GHC.Classes.Eq Interpreter.Err
